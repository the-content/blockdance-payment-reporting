import {
    mysqlTable,
    index,
    primaryKey,
    unique,
    int,
    datetime,
    tinyint,
    varchar,
    decimal,
    bigint,
} from "drizzle-orm/mysql-core"
import { sql } from "drizzle-orm"

export const nuvieDisputeData = mysqlTable(
    "nuvie_dispute_data",
    {
        id: int().autoincrement().notNull(),
        uploadId: int("upload_id").default(0).notNull(),
        transactionDate: datetime("transaction_date", { mode: "string" }).notNull(),
        methodName: tinyint("method_name").default(0).notNull(),
        disputeStatus: varchar("dispute_status", { length: 250 }).default("").notNull(),
        disputeReason: varchar("dispute_reason", { length: 250 }).default("").notNull(),
        disputeCategory: varchar("dispute_category", { length: 250 }).default("").notNull(),
        disputeAmount: decimal("dispute_amount", { precision: 13, scale: 4 }).default("0.0000").notNull(),
        currency: varchar({ length: 20 }).default("").notNull(),
        bin: int().default(0).notNull(),
        orderId: int("order_id").default(0).notNull(),
        quote: decimal({ precision: 13, scale: 4 }).default("0.0000").notNull(),
        ssoOrderId: varchar("sso_order_id", { length: 255 }).default("").notNull(),
        orderUuid: varchar("order_uuid", { length: 255 }).default("").notNull(),
        merchantId: bigint("merchant_id", { mode: "number" }).notNull(),
        currencyId: bigint("currency_id", { mode: "number" }).notNull(),
        finalAmount: decimal("final_amount", { precision: 13, scale: 4 }).default("0.0000").notNull(),
        orderCreated: datetime("order_created", { mode: "string" }).notNull(),
        cryptoAmount: decimal("crypto_amount", { precision: 16, scale: 6 }).default("0.000000").notNull(),
        orderStatus: tinyint("order_status").default(0).notNull(),
        createdAt: datetime("created_at", { mode: "string" }).notNull(),
        updatedAt: datetime("updated_at", { mode: "string" }).notNull(),
        issuerCountry: varchar("issuer_country", { length: 200 }).default("").notNull(),
        disputeDate: datetime("dispute_date", { mode: "string" }).notNull(),
    },
    (table) => [
        index("idx_upload_id").on(table.uploadId),
        index("idx_merchant_id").on(table.merchantId),
        index("idx_transaction_date_merchant_id").on(table.transactionDate, table.merchantId),
        index("idx_dispute_date_merchant_id").on(table.disputeDate, table.merchantId),
        primaryKey({ columns: [table.id], name: "nuvie_dispute_data_id" }),
        unique("uk_order_id").on(table.orderId),
    ],
)

export const nuvieDisputeFile = mysqlTable(
    "nuvie_dispute_file",
    {
        id: int().autoincrement().notNull(),
        uploadId: int("upload_id").default(0).notNull(),
        transactionDate: datetime("transaction_date", { mode: "string" }).notNull(),
        methodName: tinyint("method_name").default(0).notNull(),
        disputeStatus: varchar("dispute_status", { length: 250 }).default("").notNull(),
        disputeReason: varchar("dispute_reason", { length: 250 }).default("").notNull(),
        disputeCategory: varchar("dispute_category", { length: 250 }).default("").notNull(),
        disputeAmount: decimal("dispute_amount", { precision: 13, scale: 4 }).default("0.0000").notNull(),
        currency: varchar({ length: 20 }).default("").notNull(),
        bin: int().default(0).notNull(),
        orderId: int("order_id").default(0).notNull(),
        status: tinyint().default(0).notNull(),
        failReason: varchar("fail_reason", { length: 300 }).default("").notNull(),
        createdAt: datetime("created_at", { mode: "string" }).notNull(),
        updatedAt: datetime("updated_at", { mode: "string" }).notNull(),
        issuerCountry: varchar("issuer_country", { length: 200 }).default("").notNull(),
        disputeDate: datetime("dispute_date", { mode: "string" }).notNull(),
    },
    (table) => [
        index("idx_upload_id").on(table.uploadId),
        primaryKey({ columns: [table.id], name: "nuvie_dispute_file_id" }),
        unique("uk_order_id").on(table.orderId),
    ],
)

export const nuvieFraudData = mysqlTable(
    "nuvie_fraud_data",
    {
        id: int().autoincrement().notNull(),
        uploadId: int("upload_id").default(0).notNull(),
        reportDate: datetime("report_date", { mode: "string" }).notNull(),
        fraudAmount: decimal("fraud_amount", { precision: 13, scale: 4 }).default("0.0000").notNull(),
        fraudCurrency: varchar("fraud_currency", { length: 20 }).default("").notNull(),
        methodName: tinyint("method_name").default(0).notNull(),
        bin: int().default(0).notNull(),
        orderId: int("order_id").default(0).notNull(),
        transactionDate: datetime("transaction_date", { mode: "string" }).notNull(),
        issuerCountry: varchar("issuer_country", { length: 200 }).default("").notNull(),
        ssoOrderId: varchar("sso_order_id", { length: 255 }).default("").notNull(),
        orderUuid: varchar("order_uuid", { length: 255 }).default("").notNull(),
        merchantId: bigint("merchant_id", { mode: "number" }).notNull(),
        currencyId: bigint("currency_id", { mode: "number" }).notNull(),
        finalAmount: decimal("final_amount", { precision: 13, scale: 4 }).default("0.0000").notNull(),
        orderCreated: datetime("order_created", { mode: "string" }).notNull(),
        cryptoAmount: decimal("crypto_amount", { precision: 16, scale: 6 }).default("0.000000").notNull(),
        orderStatus: tinyint("order_status").default(0).notNull(),
        createdAt: datetime("created_at", { mode: "string" }).notNull(),
        updatedAt: datetime("updated_at", { mode: "string" }).notNull(),
        quote: decimal({ precision: 13, scale: 4 }).default("0.0000").notNull(),
    },
    (table) => [
        index("idx_upload_id").on(table.uploadId),
        index("idx_merchant_id").on(table.merchantId),
        index("idx_report_date_merchant_id").on(table.reportDate, table.merchantId),
        index("idx_transaction_date_merchant_id").on(table.transactionDate, table.merchantId),
        primaryKey({ columns: [table.id], name: "nuvie_fraud_data_id" }),
        unique("uk_order_id").on(table.orderId),
    ],
)

export const nuvieFraudFile = mysqlTable(
    "nuvie_fraud_file",
    {
        id: int().autoincrement().notNull(),
        uploadId: int("upload_id").default(0).notNull(),
        reportDate: datetime("report_date", { mode: "string" }).notNull(),
        fraudAmount: decimal("fraud_amount", { precision: 13, scale: 4 }).default("0.0000").notNull(),
        fraudCurrency: varchar("fraud_currency", { length: 20 }).default("").notNull(),
        methodName: tinyint("method_name").default(0).notNull(),
        bin: int().default(0).notNull(),
        orderId: int("order_id").default(0).notNull(),
        transactionDate: datetime("transaction_date", { mode: "string" }).notNull(),
        issuerCountry: varchar("issuer_country", { length: 200 }).default("").notNull(),
        status: tinyint().default(0).notNull(),
        failReason: varchar("fail_reason", { length: 300 }).default("").notNull(),
        createdAt: datetime("created_at", { mode: "string" }).notNull(),
        updatedAt: datetime("updated_at", { mode: "string" }).notNull(),
    },
    (table) => [
        index("idx_upload_id").on(table.uploadId),
        primaryKey({ columns: [table.id], name: "nuvie_fraud_file_id" }),
        unique("uk_order_id").on(table.orderId),
    ],
)

export const nuvieTransactionData = mysqlTable(
    "nuvie_transaction_data",
    {
        id: int().autoincrement().notNull(),
        uploadId: int("upload_id").default(0).notNull(),
        date: datetime({ mode: "string" }).notNull(),
        amount: decimal({ precision: 13, scale: 4 }).default("0.0000").notNull(),
        currency: varchar({ length: 20 }).default("").notNull(),
        transactionResult: varchar("transaction_result", { length: 200 }).default("").notNull(),
        methodName: tinyint("method_name").default(0).notNull(),
        bin: int().default(0).notNull(),
        orderId: int("order_id").default(0).notNull(),
        reasonCode: varchar("reason_code", { length: 200 }).default("").notNull(),
        quote: decimal({ precision: 13, scale: 4 }).default("0.0000").notNull(),
        ssoOrderId: varchar("sso_order_id", { length: 255 }).default("").notNull(),
        orderUuid: varchar("order_uuid", { length: 255 }).default("").notNull(),
        merchantId: bigint("merchant_id", { mode: "number" }).notNull(),
        currencyId: bigint("currency_id", { mode: "number" }).notNull(),
        finalAmount: decimal("final_amount", { precision: 13, scale: 4 }).default("0.0000").notNull(),
        orderCreated: datetime("order_created", { mode: "string" }).notNull(),
        cryptoAmount: decimal("crypto_amount", { precision: 16, scale: 6 }).default("0.000000").notNull(),
        orderStatus: tinyint("order_status").default(0).notNull(),
        createdAt: datetime("created_at", { mode: "string" }).notNull(),
        updatedAt: datetime("updated_at", { mode: "string" }).notNull(),
        transactionId: varchar("transaction_id", { length: 250 }).default("").notNull(),
        issuerCountry: varchar("issuer_country", { length: 200 }).default("").notNull(),
    },
    (table) => [
        index("idx_upload_id").on(table.uploadId),
        index("idx_merchant_id").on(table.merchantId),
        index("idx_order_id").on(table.orderId),
        index("idx_date_merchant_trans_result").on(table.date, table.merchantId, table.transactionResult),
        primaryKey({ columns: [table.id], name: "nuvie_transaction_data_id" }),
        unique("uk_unique_transaction_order_result").on(table.transactionId, table.orderId, table.transactionResult),
    ],
)

export const nuvieTransactionFile = mysqlTable(
    "nuvie_transaction_file",
    {
        id: int().autoincrement().notNull(),
        uploadId: int("upload_id").default(0).notNull(),
        date: datetime({ mode: "string" }).notNull(),
        amount: decimal({ precision: 13, scale: 4 }).default("0.0000").notNull(),
        currency: varchar({ length: 20 }).default("").notNull(),
        transactionResult: varchar("transaction_result", { length: 200 }).default("").notNull(),
        methodName: tinyint("method_name").default(0).notNull(),
        bin: int().default(0).notNull(),
        orderId: int("order_id").default(0).notNull(),
        status: tinyint().default(0).notNull(),
        failReason: varchar("fail_reason", { length: 300 }).default("").notNull(),
        createdAt: datetime("created_at", { mode: "string" }).notNull(),
        updatedAt: datetime("updated_at", { mode: "string" }).notNull(),
        reasonCode: varchar("reason_code", { length: 200 }).default("").notNull(),
        transactionId: varchar("transaction_id", { length: 250 }).default("").notNull(),
        issuerCountry: varchar("issuer_country", { length: 200 }).default("").notNull(),
    },
    (table) => [
        index("idx_upload_id").on(table.uploadId),
        primaryKey({ columns: [table.id], name: "nuvie_transaction_file_id" }),
        unique("uk_unique_transaction_order_result").on(table.transactionId, table.orderId, table.transactionResult),
    ],
)

export const reportDataRecord = mysqlTable(
    "report_data_record",
    {
        id: int().autoincrement().notNull(),
        reference: varchar({ length: 100 }),
        type: int(),
        url: varchar({ length: 200 }),
        lineCount: int("line_count"),
        status: int().default(0),
        createdTime: datetime("created_time", { mode: "string" }).default(sql`(CURRENT_TIMESTAMP)`),
    },
    (table) => [index("reference_state_index").on(table.reference, table.status), primaryKey({ columns: [table.id], name: "report_data_record_id" })],
)

export const reportQuote = mysqlTable(
    "report_quote",
    {
        id: int().autoincrement().notNull(),
        fromCode: varchar("from_code", { length: 10 }).default("").notNull(),
        fromId: int("from_id").default(0).notNull(),
        toCode: varchar("to_code", { length: 10 }).default("").notNull(),
        toId: int("to_id").default(0).notNull(),
        createdAt: datetime("created_at", { mode: "string" }).notNull(),
        updatedAt: datetime("updated_at", { mode: "string" }).notNull(),
        quote: decimal({ precision: 13, scale: 4 }).default("0.0000").notNull(),
    },
    (table) => [primaryKey({ columns: [table.id], name: "report_quote_id" }), unique("uk_from_code_to_code").on(table.fromCode, table.toCode)],
)
